{"version":3,"sources":["utils/API.js","components/Wrapper/index.js","components/BodyWrapper/index.js","components/Jumbotron/index.js","components/SearchBar/index.js","components/BookList/index.js","pages/search.js","components/Nav/index.js","pages/details.js","App.js","registerServiceWorker.js","index.js"],"names":["API","axios","get","Wrapper","props","react_default","a","createElement","className","children","BodyWrapper","Jumbotron","SearchBar","id","type","placeholder","aria-label","aria-describedby","BookList","Search","state","components_Wrapper","components_Jumbotron","components_BodyWrapper","components_SearchBar","Component","Nav","lib","brand","left","href","Detail","book","_this2","this","match","params","then","res","setState","data","catch","err","console","log","App","BrowserRouter","components_Nav","Switch","Route","exact","path","component","Saved","NoMatch","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8d4397a3.chunk.js","sourcesContent":["\nimport axios from \"axios\";\n\nexport default {\n    getBooks: function() {\n        return axios.get(\"/api/books\");\n    },\n    \n}","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction BodyWrapper(props) {\n    return <div className=\"bodyWrapper\">{props.children}</div>\n}\n\nexport default BodyWrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n    return(\n        <div className=\"jumbotron\">\n            <h1 className=\"display-4\">NYT Google Books Search</h1>\n            <p className=\"lead\">This is a simple Google books searching engine, provide you the convenience of quickly looking up books that you are looking forward to read!</p>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction SearchBar(props) {\n    return(\n        <div className=\"searchDiv\">\n            <label id=\"bookSearch\">Book Search</label>\n            <div className=\"input-group mb-3\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"Book Title...\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\" />\n                <div className=\"input-group-append\">\n                    <button className=\"btn btn-outline-secondary\" type=\"button\" id=\"searchBtn\">search</button>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default SearchBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction BookList(props) {\n    return(\n        <div className=\"card bg-light mb-3\">\n            <div className=\"card-body clearfix\">\n                <img className=\"bookImage img-thumbnail\" src={props.image} />\n                <div className=\"infoDiv\">\n                    <button type=\"button\" class=\"btn btn-info\">Save</button>\n                    &nbsp;\n                    <a href={props.link}><button type=\"button\" class=\"btn btn-secondary\">View</button></a>\n                    <br></br><br></br>\n                    <h5 className=\"card-title\">{props.title}</h5>\n                    <p className=\"author\">{props.author}</p>\n                    <p className=\"card-text\">{props.description}</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default BookList;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\n// import booklist from \"./booklist.json\";\nimport Wrapper from \"../components/Wrapper\";\nimport BodyWrapper from \"../components/BodyWrapper\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport SearchBar from \"../components/SearchBar\";\nimport BookList from \"../components/BookList\";\n\nclass Search extends Component {\n    state = {\n        // booklist\n      };\n    \n    render() {\n        return (\n            <Wrapper>\n                <Jumbotron />\n                <BodyWrapper>\n                    <SearchBar />\n                    {/* {this.state.booklist.map((book) => (\n                    <BookList\n                        image={book.image}\n                        title={book.title}\n                        author={book.author}\n                        description={book.description}\n                        link={book.link}\n                    />\n                    ))} */}\n                    {/* <BookList /> */}\n                </BodyWrapper>\n            </Wrapper>\n        );\n    }\n}\n\nexport default Search;","import React from \"react\";\nimport { Navbar, NavItem, Button } from \"react-materialize\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n    return(\n        <Navbar brand='NYT Google Book Search' left>\n            <NavItem href='get-started.html'>Search</NavItem>\n            <NavItem href='components.html'>Saved</NavItem>\n        </Navbar>\n    )\n}\n\nexport default Nav;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\n// import booklist from \"./booklist.json\";\nimport Wrapper from \"../components/Wrapper\";\nimport Nav from \"../components/Nav\";\nimport BodyWrapper from \"../components/BodyWrapper\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport SearchBar from \"../components/SearchBar\";\nimport BookList from \"../components/BookList\";\n\nclass Detail extends Component {\n    state = {\n        book: {}\n    };\n\n    componentDidMount(){\n        API.getBooks(this.props.match.params.id)\n            .then(res => this.setState( { book: res.data } ))\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        return(\n            <Wrapper>\n                <Jumbotron />\n                <BodyWrapper>\n                    \n                </BodyWrapper>\n            </Wrapper>\n        )\n    }\n\n}\n\nexport default Detail;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Search from \"./pages/search\";\nimport Saved from \"./pages/saved\";\nimport Detail from \"./pages/details\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Search} />\n          <Route exact path=\"/books\" component={Saved} />\n          <Route exact path=\"/books/:id\" component={Detail} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}